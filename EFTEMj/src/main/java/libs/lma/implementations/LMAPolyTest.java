/**
 * EFTEMj - Processing of Energy Filtering TEM images with ImageJ
 *
 * Copyright (c) 2014, Michael Entrup b. Epping <michael.entrup@wwu.de>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package libs.lma.implementations;

import libs.lma.LMA;
import libs.lma.LMAMultiDimFunction;

/**
 * This class tests the LMA implementation with an 2D polynomial.<br />
 * The data has been extracted from a SR-EELS data set. It represents the width of the spectrum depending on the
 * position on the CCD chip (see <a
 * href="https://github.com/EFTEMj/EFTEMj/tree/master/Scripts%2BMacros/examples/SR-EELS_characterisation"
 * >SR-EELS_characterisation</a>).
 *
 * Call the main method to run the test.
 *
 * @author Michael Entrup b. Epping <michael.entrup@wwu.de>
 *
 */
class LMAPolyTest extends LMAMultiDimFunction {

    private final Polynomial_2D poly;

    /**
     * Create a polynomial function with the orders m=2 and n=2.
     */
    public LMAPolyTest() {
	poly = new Polynomial_2D(2, 2);
    }

    /**
     * @return a 2D array (Nx3) that contains the y values, x1 values and x2 values. N is the quantity of data points.
     */
    public double[][] values() {
	final double[] y_vals = { 192, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 181, 180, 179, 178,
		177, 176, 175, 174, 173, 173, 171, 171, 169, 169, 168, 167, 166, 166, 166, 164, 162, 162, 162, 159,
		159, 159, 157, 157, 155, 155, 154, 153, 152, 151, 151, 150, 148, 148, 147, 146, 144, 144, 142, 200,
		200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 189, 188, 187, 186, 185, 185, 183, 182,
		181, 181, 179, 179, 178, 178, 176, 176, 174, 174, 173, 172, 171, 170, 169, 168, 167, 166, 166, 165,
		164, 164, 162, 161, 161, 160, 159, 157, 156, 156, 155, 154, 153, 152, 151, 206, 206, 204, 203, 202,
		201, 200, 200, 198, 198, 197, 196, 195, 194, 193, 192, 192, 190, 189, 188, 188, 186, 186, 185, 184,
		183, 182, 180, 180, 180, 179, 178, 177, 176, 176, 174, 174, 172, 172, 170, 171, 169, 168, 167, 166,
		166, 164, 163, 162, 161, 162, 160, 159, 158, 157, 156, 209, 208, 208, 207, 207, 205, 204, 203, 202,
		201, 200, 199, 198, 198, 197, 196, 195, 194, 193, 192, 191, 190, 190, 189, 187, 187, 186, 185, 184,
		183, 182, 181, 179, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 172, 171, 169, 168, 167, 166,
		165, 165, 163, 163, 162, 160, 160, 209, 209, 208, 207, 206, 205, 204, 203, 202, 201, 201, 200, 199,
		197, 197, 196, 196, 194, 194, 193, 191, 190, 190, 189, 188, 186, 186, 185, 185, 184, 182, 182, 180,
		180, 179, 179, 177, 176, 175, 174, 173, 171, 171, 171, 170, 169, 169, 167, 166, 166, 165, 163, 162,
		162, 161, 160, 206, 206, 204, 204, 202, 202, 201, 199, 199, 198, 197, 196, 195, 195, 193, 193, 192,
		191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 181, 180, 179, 177, 177, 176, 175, 174, 173,
		172, 172, 171, 170, 170, 168, 168, 167, 166, 165, 164, 163, 163, 162, 161, 161, 159, 158, 157, 201,
		201, 200, 199, 198, 197, 196, 195, 194, 194, 192, 191, 190, 189, 188, 188, 187, 186, 184, 184, 183,
		182, 181, 180, 180, 179, 178, 177, 176, 175, 174, 173, 172, 172, 171, 170, 169, 169, 167, 166, 165,
		165, 163, 163, 163, 162, 161, 159, 159, 158, 157, 156, 155, 154, 154, 152, 196, 196, 195, 194, 193,
		192, 191, 190, 189, 189, 187, 187, 186, 184, 184, 183, 182, 181, 180, 180, 179, 178, 177, 176, 175,
		174, 173, 173, 171, 171, 170, 169, 168, 166, 166, 165, 164, 164, 163, 162, 161, 161, 160, 158, 158,
		157, 155, 155, 154, 153, 152, 152, 150, 150, 149, 147 };

	final double[] x1_vals = { -1760, -1696, -1632, -1568, -1504, -1440, -1376, -1312, -1248, -1184, -1120, -1056,
		-992, -928, -864, -800, -736, -672, -608, -544, -480, -416, -352, -288, -224, -160, -96, -32, 32, 96,
		160, 224, 288, 352, 416, 480, 544, 608, 672, 736, 800, 864, 928, 992, 1056, 1120, 1184, 1248, 1312,
		1376, 1440, 1504, 1568, 1632, 1696, 1760, -1760, -1696, -1632, -1568, -1504, -1440, -1376, -1312,
		-1248, -1184, -1120, -1056, -992, -928, -864, -800, -736, -672, -608, -544, -480, -416, -352, -288,
		-224, -160, -96, -32, 32, 96, 160, 224, 288, 352, 416, 480, 544, 608, 672, 736, 800, 864, 928, 992,
		1056, 1120, 1184, 1248, 1312, 1376, 1440, 1504, 1568, 1632, 1696, 1760, -1760, -1696, -1632, -1568,
		-1504, -1440, -1376, -1312, -1248, -1184, -1120, -1056, -992, -928, -864, -800, -736, -672, -608, -544,
		-480, -416, -352, -288, -224, -160, -96, -32, 32, 96, 160, 224, 288, 352, 416, 480, 544, 608, 672, 736,
		800, 864, 928, 992, 1056, 1120, 1184, 1248, 1312, 1376, 1440, 1504, 1568, 1632, 1696, 1760, -1760,
		-1696, -1632, -1568, -1504, -1440, -1376, -1312, -1248, -1184, -1120, -1056, -992, -928, -864, -800,
		-736, -672, -608, -544, -480, -416, -352, -288, -224, -160, -96, -32, 32, 96, 160, 224, 288, 352, 416,
		480, 544, 608, 672, 736, 800, 864, 928, 992, 1056, 1120, 1184, 1248, 1312, 1376, 1440, 1504, 1568,
		1632, 1696, 1760, -1761, -1696, -1632, -1568, -1504, -1440, -1376, -1312, -1248, -1184, -1120, -1056,
		-992, -928, -864, -800, -736, -672, -608, -544, -480, -416, -352, -288, -224, -160, -96, -32, 32, 96,
		160, 224, 288, 352, 416, 480, 544, 608, 672, 736, 800, 864, 928, 992, 1056, 1120, 1184, 1248, 1312,
		1376, 1440, 1504, 1568, 1632, 1696, 1760, -1760, -1696, -1632, -1568, -1504, -1440, -1376, -1312,
		-1248, -1184, -1120, -1056, -992, -928, -864, -800, -736, -672, -608, -544, -480, -416, -352, -288,
		-224, -160, -96, -32, 32, 96, 160, 224, 288, 352, 416, 480, 544, 608, 672, 736, 800, 864, 928, 992,
		1056, 1120, 1184, 1248, 1312, 1376, 1440, 1504, 1568, 1632, 1696, 1760, -1760, -1696, -1632, -1568,
		-1504, -1440, -1376, -1312, -1248, -1184, -1120, -1056, -992, -928, -864, -800, -736, -672, -608, -544,
		-480, -416, -352, -288, -224, -160, -96, -32, 32, 96, 160, 224, 288, 352, 416, 480, 544, 608, 672, 736,
		800, 864, 928, 992, 1056, 1120, 1184, 1248, 1312, 1376, 1440, 1504, 1568, 1632, 1696, 1760, -1760,
		-1696, -1632, -1568, -1504, -1440, -1376, -1312, -1248, -1184, -1120, -1056, -992, -928, -864, -800,
		-736, -672, -608, -544, -480, -416, -352, -288, -224, -160, -96, -32, 32, 96, 160, 224, 288, 352, 416,
		480, 544, 608, 672, 736, 800, 864, 928, 992, 1056, 1120, 1184, 1248, 1312, 1376, 1440, 1504, 1568,
		1632, 1696, 1760 };

	final double[] x2_vals = { -295, -293, -291, -289, -287, -285, -283, -282, -280, -278, -276, -274, -273, -271,
		-269, -267, -266, -264, -262, -261, -259, -257, -256, -254, -253, -251, -249, -248, -246, -245, -243,
		-241, -239, -238, -236, -234, -233, -231, -229, -228, -226, -224, -223, -221, -219, -217, -215, -213,
		-211, -209, -207, -206, -203, -201, -199, -197, -228, -226, -224, -222, -221, -219, -218, -216, -215,
		-213, -212, -210, -209, -207, -206, -205, -203, -202, -201, -199, -198, -197, -195, -194, -193, -191,
		-190, -189, -187, -186, -185, -183, -182, -181, -179, -178, -177, -175, -174, -172, -171, -170, -168,
		-167, -165, -164, -162, -160, -159, -157, -155, -154, -152, -150, -148, -146, -155, -154, -152, -151,
		-150, -148, -147, -146, -145, -144, -142, -141, -140, -139, -138, -137, -136, -135, -134, -133, -132,
		-131, -130, -129, -128, -127, -126, -125, -124, -122, -121, -120, -119, -118, -117, -116, -115, -114,
		-113, -112, -110, -109, -108, -107, -106, -105, -103, -102, -101, -99, -98, -96, -95, -93, -91, -90,
		-48, -47, -46, -46, -45, -44, -43, -43, -42, -41, -41, -40, -39, -39, -38, -37, -37, -36, -36, -35,
		-35, -34, -34, -33, -33, -32, -32, -31, -31, -30, -29, -29, -28, -27, -27, -26, -26, -25, -24, -24,
		-23, -22, -21, -21, -20, -19, -18, -17, -16, -15, -14, -12, -12, -10, -9, -8, 63, 63, 64, 64, 64, 65,
		65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
		68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 72, 72, 73, 73, 73, 74, 75, 76, 77, 77, 78, 162,
		162, 162, 162, 162, 162, 161, 161, 161, 161, 161, 160, 160, 160, 159, 159, 159, 158, 158, 157, 157,
		157, 157, 156, 156, 155, 155, 155, 154, 154, 154, 153, 153, 153, 153, 152, 152, 152, 152, 152, 152,
		152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 154, 154, 155, 155, 236, 236, 235, 235, 234,
		234, 233, 233, 232, 231, 231, 230, 230, 229, 228, 227, 227, 226, 225, 225, 224, 223, 223, 222, 221,
		220, 220, 219, 218, 218, 217, 216, 216, 215, 215, 214, 214, 213, 213, 212, 212, 212, 211, 211, 211,
		210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 296, 295, 295, 294, 293, 292, 292, 291, 290,
		289, 288, 287, 286, 285, 284, 283, 282, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271,
		270, 269, 268, 268, 267, 266, 265, 265, 264, 263, 262, 262, 261, 261, 260, 260, 259, 259, 258, 258,
		258, 258, 257, 257, 257, 257, 257 };

	assert y_vals.length == x1_vals.length;
	assert y_vals.length == x2_vals.length;
	final double[][] x_vals = new double[x1_vals.length][3];
	for (int i = 0; i < x1_vals.length; i++) {
	    x_vals[i][0] = y_vals[i];
	    x_vals[i][1] = x1_vals[i];
	    x_vals[i][2] = x2_vals[i];
	}
	return x_vals;
    }

    @Override
    public double getY(final double[] x, final double[] a) {
	return poly.getY(x, a);
    }

    @Override
    public double getPartialDerivate(final double[] x, final double[] a, final int parameterIndex) {
	return poly.getPartialDerivate(x, a, parameterIndex);
    }

    public static void main() {
	final LMAPolyTest func = new LMAPolyTest();
	final double[] a_fit = { 1., 1., 1., 1., 1., 1., 1., 1., 1. };
	final LMA lma = new LMA(func, a_fit, func.values());
	lma.fit();
	final double[] a_gnuplot = { 185.215, 0.0114085, -0.000228872, -0.0141436, 5.04408e-006, -3.21174e-008,
		8.14949e-008, 1.25416e-009, -2.78295e-012 };
	System.out.println(String.format("%15s%15s%15s", " Java", " Gnuplot", " Diff"));
	for (int i = 0; i < a_fit.length; i++) {
	    System.out.println(String.format("%15.6g%15.6g%15.6g", a_fit[i], a_gnuplot[i],
		    Math.abs(a_gnuplot[i] - a_fit[i])));
	}
	System.out.println("");
    }
}
